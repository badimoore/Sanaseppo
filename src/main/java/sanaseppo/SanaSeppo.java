/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sanaseppo;

import java.awt.Color;
import java.awt.GraphicsEnvironment;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.undo.UndoManager;

/**
 *
 * @author Badi Moore
 */
public class SanaSeppo extends javax.swing.JFrame {

    /**
     * Creates new form SanaSeppo
     */
    public SanaSeppo() {

        initComponents();

        jTextPaneTeksti.requestFocusInWindow();

        tallennettu = true; //Määrittelee, kysyykö ohjelma sulkiessa varmistusta, jos tiedostoa ei ole tallennettu
        onRTF = false; //Tallennetaanko teksti rtf-muodossa

        //Lokalisaatiotekstit
        UIManager.put("OptionPane.cancelButtonText", "Peruuta");
        UIManager.put("OptionPane.yesButtonText", "Kyllä");
        UIManager.put("OptionPane.noButtonText", "Ei");
        UIManager.put("FileChooser.cancelButtonText", "Peruuta");
        UIManager.put("FileChooser.saveButtonText", "Tallenna");
        UIManager.put("FileChooser.openButtonText", "Avaa");
        UIManager.put("FileChooser.saveDialogTitleText", "Tallenna");
        UIManager.put("FileChooser.openDialogTitleText", "Avaa");
        UIManager.put("ColorChooser.cancelText", "Peruuta");
        UIManager.put("ColorChooser.resetText", "Palauta");

        //Tiedoston valintadialogin säätäminen
        tiedosto = null;
        tiedostoValinta = new JFileChooser();
        tiedostoValinta.addChoosableFileFilter(new FileNameExtensionFilter("Tavallinen teksti (*.txt)", "txt"));
        FileFilter rtfFiltteri = new FileNameExtensionFilter("Rikas teksti (*.rtf)", "rtf");
        tiedostoValinta.addChoosableFileFilter(rtfFiltteri);
        tiedostoValinta.setFileFilter(rtfFiltteri);
        tiedostoValinta.setMultiSelectionEnabled(false);
        tiedostoValinta.setCurrentDirectory(new File(".")); //Asettaa oletustallennushakemiston samaan hakemistoon kuin .jar-tiedosto

        //Haetaan systeemin fontit
        GraphicsEnvironment grafiikkaYmparisto = GraphicsEnvironment.getLocalGraphicsEnvironment();
        String[] fontit = grafiikkaYmparisto.getAvailableFontFamilyNames();
        for (String fontti : fontit) {
            jComboBoxFontit.addItem(fontti);
        }
        jComboBoxFontit.setSelectedItem("Arial");

        variValinta = new JColorChooser();
        vari = Color.BLACK;

        //Lisätään dokumenttiin kumoustoiminnallisuus ja kumous/palautusnappien tila
        kumousKuuntelija();
        kumoaPalautaNapit();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPaneTeksti = new javax.swing.JTextPane();
        jButtonTallenna = new javax.swing.JButton();
        jButtonLeikkaa = new javax.swing.JButton();
        jButtonKopioi = new javax.swing.JButton();
        jButtonLiita = new javax.swing.JButton();
        jButtonLihavoi = new javax.swing.JButton();
        jButtonKursivoi = new javax.swing.JButton();
        jButtonTulosta = new javax.swing.JButton();
        jButtonAlleviivaa = new javax.swing.JButton();
        jButtonFonttiVari = new javax.swing.JButton();
        jComboBoxFKoko = new javax.swing.JComboBox<>();
        jComboBoxFontit = new javax.swing.JComboBox<>();
        jButtonKumoa = new javax.swing.JButton();
        jButtonUudelleen = new javax.swing.JButton();
        jLabelSanoja = new javax.swing.JLabel();
        jLabelRiveja = new javax.swing.JLabel();
        jButtonPikaFonttiVari = new javax.swing.JButton();
        jLabelMerkkiIndeksi = new javax.swing.JLabel();
        jLabelRiviIndeksi = new javax.swing.JLabel();
        jMenuBarValikko = new javax.swing.JMenuBar();
        jMenuTiedosto = new javax.swing.JMenu();
        jMenuItemUusi = new javax.swing.JMenuItem();
        jMenuItemAvaa = new javax.swing.JMenuItem();
        jMenuItemTallenna = new javax.swing.JMenuItem();
        jMenuItemTallennaNimella = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemTulosta = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemLopeta = new javax.swing.JMenuItem();
        jMenuMuokkaa = new javax.swing.JMenu();
        jMenuItemLeikkaa = new javax.swing.JMenuItem();
        jMenuItemKopioi = new javax.swing.JMenuItem();
        jMenuItemLiita = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItemValitseKaikki = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItemKumoa = new javax.swing.JMenuItem();
        jMenuItemUudelleen = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Sanaseppo");
        setIconImage(haeIkoni("/text-editor.png").getImage()
        );
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jTextPaneTeksti.setContentType("text/rtf"); // NOI18N
        jTextPaneTeksti.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextPaneTeksti.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextPaneTekstiCaretUpdate(evt);
            }
        });
        jScrollPane1.setViewportView(jTextPaneTeksti);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 25;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 847;
        gridBagConstraints.ipady = 472;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jButtonTallenna.setBackground(new java.awt.Color(255, 255, 255));
        jButtonTallenna.setIcon(haeIkoni("/document-save.png"));
        jButtonTallenna.setToolTipText("Tallenna");
        jButtonTallenna.setFocusPainted(false);
        jButtonTallenna.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButtonTallenna.setMaximumSize(new java.awt.Dimension(64, 64));
        jButtonTallenna.setMinimumSize(new java.awt.Dimension(64, 64));
        jButtonTallenna.setPreferredSize(new java.awt.Dimension(64, 64));
        jButtonTallenna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTallennaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 15, 12);
        getContentPane().add(jButtonTallenna, gridBagConstraints);

        jButtonLeikkaa.setBackground(new java.awt.Color(255, 255, 255));
        jButtonLeikkaa.setIcon(haeIkoni("/edit-cut.png"));
        jButtonLeikkaa.setToolTipText("Leikkaa");
        jButtonLeikkaa.setMaximumSize(new java.awt.Dimension(30, 30));
        jButtonLeikkaa.setMinimumSize(new java.awt.Dimension(30, 30));
        jButtonLeikkaa.setPreferredSize(new java.awt.Dimension(30, 30));
        jButtonLeikkaa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLeikkaaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 15, 0, 0);
        getContentPane().add(jButtonLeikkaa, gridBagConstraints);

        jButtonKopioi.setBackground(new java.awt.Color(255, 255, 255));
        jButtonKopioi.setIcon(haeIkoni("/edit-copy.png"));
        jButtonKopioi.setToolTipText("Kopioi");
        jButtonKopioi.setMaximumSize(new java.awt.Dimension(30, 30));
        jButtonKopioi.setMinimumSize(new java.awt.Dimension(30, 30));
        jButtonKopioi.setPreferredSize(new java.awt.Dimension(30, 30));
        jButtonKopioi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonKopioiActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 0);
        getContentPane().add(jButtonKopioi, gridBagConstraints);

        jButtonLiita.setBackground(new java.awt.Color(255, 255, 255));
        jButtonLiita.setIcon(haeIkoni("/edit-paste.png"));
        jButtonLiita.setToolTipText("Liitä");
        jButtonLiita.setMaximumSize(new java.awt.Dimension(30, 30));
        jButtonLiita.setMinimumSize(new java.awt.Dimension(30, 30));
        jButtonLiita.setPreferredSize(new java.awt.Dimension(30, 30));
        jButtonLiita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLiitaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 0);
        getContentPane().add(jButtonLiita, gridBagConstraints);

        jButtonLihavoi.setBackground(new java.awt.Color(255, 255, 255));
        jButtonLihavoi.setIcon(haeIkoni("/format-text-bold.png"));
        jButtonLihavoi.setToolTipText("Lihavoi");
        jButtonLihavoi.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        jButtonLihavoi.setBorderPainted(false);
        jButtonLihavoi.setMaximumSize(new java.awt.Dimension(30, 30));
        jButtonLihavoi.setMinimumSize(new java.awt.Dimension(30, 30));
        jButtonLihavoi.setPreferredSize(new java.awt.Dimension(30, 30));
        jButtonLihavoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLihavoiActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 15, 0, 0);
        getContentPane().add(jButtonLihavoi, gridBagConstraints);

        jButtonKursivoi.setBackground(new java.awt.Color(255, 255, 255));
        jButtonKursivoi.setIcon(haeIkoni("/format-text-italic.png"));
        jButtonKursivoi.setToolTipText("Kursivoi");
        jButtonKursivoi.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        jButtonKursivoi.setBorderPainted(false);
        jButtonKursivoi.setMaximumSize(new java.awt.Dimension(30, 30));
        jButtonKursivoi.setMinimumSize(new java.awt.Dimension(30, 30));
        jButtonKursivoi.setPreferredSize(new java.awt.Dimension(30, 30));
        jButtonKursivoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonKursivoiActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 0);
        getContentPane().add(jButtonKursivoi, gridBagConstraints);

        jButtonTulosta.setBackground(new java.awt.Color(255, 255, 255));
        jButtonTulosta.setIcon(haeIkoni("/document-print.png"));
        jButtonTulosta.setToolTipText("Tulosta");
        jButtonTulosta.setMaximumSize(new java.awt.Dimension(64, 64));
        jButtonTulosta.setMinimumSize(new java.awt.Dimension(64, 64));
        jButtonTulosta.setPreferredSize(new java.awt.Dimension(64, 64));
        jButtonTulosta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTulostaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 0);
        getContentPane().add(jButtonTulosta, gridBagConstraints);

        jButtonAlleviivaa.setBackground(new java.awt.Color(255, 255, 255));
        jButtonAlleviivaa.setIcon(haeIkoni("/format-text-underline.png"));
        jButtonAlleviivaa.setToolTipText("Alleviivaa");
        jButtonAlleviivaa.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        jButtonAlleviivaa.setBorderPainted(false);
        jButtonAlleviivaa.setMaximumSize(new java.awt.Dimension(30, 30));
        jButtonAlleviivaa.setMinimumSize(new java.awt.Dimension(30, 30));
        jButtonAlleviivaa.setPreferredSize(new java.awt.Dimension(30, 30));
        jButtonAlleviivaa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAlleviivaaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 0);
        getContentPane().add(jButtonAlleviivaa, gridBagConstraints);

        jButtonFonttiVari.setBackground(new java.awt.Color(255, 255, 255));
        jButtonFonttiVari.setIcon(haeIkoni("/format-text-color.png"));
        jButtonFonttiVari.setToolTipText("Fontin väri");
        jButtonFonttiVari.setMaximumSize(new java.awt.Dimension(30, 30));
        jButtonFonttiVari.setMinimumSize(new java.awt.Dimension(30, 30));
        jButtonFonttiVari.setPreferredSize(new java.awt.Dimension(30, 30));
        jButtonFonttiVari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFonttiVariActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 57, 0, 0);
        getContentPane().add(jButtonFonttiVari, gridBagConstraints);

        jComboBoxFKoko.setEditable(true);
        jComboBoxFKoko.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8", "9", "10", "11", "12", "14", "16", "18", "20", "24", "28", "32", "36", "40", "44", "48", "52", "56", "60" }));
        jComboBoxFKoko.setSelectedIndex(4);
        jComboBoxFKoko.setToolTipText("Fontin koko");
        jComboBoxFKoko.setMaximumSize(new java.awt.Dimension(60, 30));
        jComboBoxFKoko.setMinimumSize(new java.awt.Dimension(60, 30));
        jComboBoxFKoko.setPreferredSize(new java.awt.Dimension(60, 30));
        jComboBoxFKoko.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFKokoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 13;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 0);
        getContentPane().add(jComboBoxFKoko, gridBagConstraints);

        jComboBoxFontit.setToolTipText("Fontti");
        jComboBoxFontit.setMaximumSize(new java.awt.Dimension(100, 30));
        jComboBoxFontit.setMinimumSize(new java.awt.Dimension(100, 30));
        jComboBoxFontit.setPreferredSize(new java.awt.Dimension(100, 30));
        jComboBoxFontit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFontitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 133;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 15, 0, 0);
        getContentPane().add(jComboBoxFontit, gridBagConstraints);

        jButtonKumoa.setBackground(new java.awt.Color(255, 255, 255));
        jButtonKumoa.setIcon(haeIkoni("/edit-undo.png"));
        jButtonKumoa.setToolTipText("Kumoa");
        jButtonKumoa.setMaximumSize(new java.awt.Dimension(30, 30));
        jButtonKumoa.setMinimumSize(new java.awt.Dimension(30, 30));
        jButtonKumoa.setPreferredSize(new java.awt.Dimension(30, 30));
        jButtonKumoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonKumoaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 32, 0, 0);
        getContentPane().add(jButtonKumoa, gridBagConstraints);

        jButtonUudelleen.setBackground(new java.awt.Color(255, 255, 255));
        jButtonUudelleen.setIcon(haeIkoni("/edit-redo.png"));
        jButtonUudelleen.setToolTipText("Tee uudelleen");
        jButtonUudelleen.setMaximumSize(new java.awt.Dimension(30, 30));
        jButtonUudelleen.setMinimumSize(new java.awt.Dimension(30, 30));
        jButtonUudelleen.setPreferredSize(new java.awt.Dimension(30, 30));
        jButtonUudelleen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUudelleenActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 66, 0, 0);
        getContentPane().add(jButtonUudelleen, gridBagConstraints);

        jLabelSanoja.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jLabelSanoja.setText("Sanoja: 0");
        jLabelSanoja.setMaximumSize(new java.awt.Dimension(75, 15));
        jLabelSanoja.setMinimumSize(new java.awt.Dimension(75, 15));
        jLabelSanoja.setPreferredSize(new java.awt.Dimension(75, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        getContentPane().add(jLabelSanoja, gridBagConstraints);

        jLabelRiveja.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jLabelRiveja.setText("Rivejä: 1");
        jLabelRiveja.setMaximumSize(new java.awt.Dimension(60, 15));
        jLabelRiveja.setMinimumSize(new java.awt.Dimension(60, 15));
        jLabelRiveja.setPreferredSize(new java.awt.Dimension(60, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(jLabelRiveja, gridBagConstraints);

        jButtonPikaFonttiVari.setBackground(new java.awt.Color(0, 0, 0));
        jButtonPikaFonttiVari.setToolTipText("Fonttivärin pikavalinta");
        jButtonPikaFonttiVari.setMargin(new java.awt.Insets(2, 14, 2, 0));
        jButtonPikaFonttiVari.setMaximumSize(new java.awt.Dimension(14, 30));
        jButtonPikaFonttiVari.setMinimumSize(new java.awt.Dimension(14, 30));
        jButtonPikaFonttiVari.setPreferredSize(new java.awt.Dimension(14, 30));
        jButtonPikaFonttiVari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPikaFonttiVariActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 42, 0, 0);
        getContentPane().add(jButtonPikaFonttiVari, gridBagConstraints);

        jLabelMerkkiIndeksi.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jLabelMerkkiIndeksi.setText("Indeksi: 0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(jLabelMerkkiIndeksi, gridBagConstraints);

        jLabelRiviIndeksi.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jLabelRiviIndeksi.setText("Rivi: 1");
        jLabelRiviIndeksi.setMaximumSize(new java.awt.Dimension(60, 15));
        jLabelRiviIndeksi.setMinimumSize(new java.awt.Dimension(60, 15));
        jLabelRiviIndeksi.setPreferredSize(new java.awt.Dimension(60, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(jLabelRiviIndeksi, gridBagConstraints);

        jMenuTiedosto.setText("Tiedosto");

        jMenuItemUusi.setText("Uusi");
        jMenuItemUusi.setToolTipText("");
        jMenuItemUusi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemUusiActionPerformed(evt);
            }
        });
        jMenuTiedosto.add(jMenuItemUusi);

        jMenuItemAvaa.setText("Avaa");
        jMenuItemAvaa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAvaaActionPerformed(evt);
            }
        });
        jMenuTiedosto.add(jMenuItemAvaa);

        jMenuItemTallenna.setText("Tallenna");
        jMenuItemTallenna.setToolTipText("");
        jMenuItemTallenna.setEnabled(false);
        jMenuItemTallenna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTallennaActionPerformed(evt);
            }
        });
        jMenuTiedosto.add(jMenuItemTallenna);

        jMenuItemTallennaNimella.setText("Tallenna nimellä");
        jMenuItemTallennaNimella.setToolTipText("");
        jMenuItemTallennaNimella.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTallennaNimellaActionPerformed(evt);
            }
        });
        jMenuTiedosto.add(jMenuItemTallennaNimella);
        jMenuTiedosto.add(jSeparator1);

        jMenuItemTulosta.setText("Tulosta");
        jMenuItemTulosta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTulostaActionPerformed(evt);
            }
        });
        jMenuTiedosto.add(jMenuItemTulosta);
        jMenuTiedosto.add(jSeparator2);

        jMenuItemLopeta.setText("Lopeta");
        jMenuItemLopeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLopetaActionPerformed(evt);
            }
        });
        jMenuTiedosto.add(jMenuItemLopeta);

        jMenuBarValikko.add(jMenuTiedosto);

        jMenuMuokkaa.setText("Muokkaa");

        jMenuItemLeikkaa.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemLeikkaa.setText("Leikkaa");
        jMenuMuokkaa.add(jMenuItemLeikkaa);

        jMenuItemKopioi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemKopioi.setText("Kopioi");
        jMenuMuokkaa.add(jMenuItemKopioi);

        jMenuItemLiita.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemLiita.setText("Liitä");
        jMenuMuokkaa.add(jMenuItemLiita);
        jMenuMuokkaa.add(jSeparator3);

        jMenuItemValitseKaikki.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemValitseKaikki.setText("Valitse kaikki");
        jMenuItemValitseKaikki.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemValitseKaikkiActionPerformed(evt);
            }
        });
        jMenuMuokkaa.add(jMenuItemValitseKaikki);
        jMenuMuokkaa.add(jSeparator4);

        jMenuItemKumoa.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemKumoa.setText("Kumoa");
        jMenuItemKumoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemKumoaActionPerformed(evt);
            }
        });
        jMenuMuokkaa.add(jMenuItemKumoa);

        jMenuItemUudelleen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemUudelleen.setText("Tee uudelleen");
        jMenuItemUudelleen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemUudelleenActionPerformed(evt);
            }
        });
        jMenuMuokkaa.add(jMenuItemUudelleen);

        jMenuBarValikko.add(jMenuMuokkaa);

        setJMenuBar(jMenuBarValikko);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemUusiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemUusiActionPerformed
        DefaultStyledDocument uusiDokumentti = new DefaultStyledDocument(new StyleContext());
        jTextPaneTeksti.setDocument(uusiDokumentti);
        jTextPaneTeksti.setCharacterAttributes(new SimpleAttributeSet(), true);
        kumousKuuntelija();
        kumoaPalautaNapit();

        jMenuItemTallenna.setEnabled(false);

        jButtonLihavoi.setBorderPainted(false);
        jButtonKursivoi.setBorderPainted(false);
        jButtonAlleviivaa.setBorderPainted(false);

        vari = Color.BLACK;
        jButtonPikaFonttiVari.setBackground(vari);

        setTitle("Sanaseppo");
        tiedosto = null;
    }//GEN-LAST:event_jMenuItemUusiActionPerformed

    // Tiedoston avaaminen
    private void jMenuItemAvaaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAvaaActionPerformed
        int tiedostoTila = tiedostoValinta.showOpenDialog(null);

        if (tiedostoTila == JFileChooser.APPROVE_OPTION) {
            try {
                tiedosto = tiedostoValinta.getSelectedFile();
                DefaultStyledDocument uusiDokumentti = new DefaultStyledDocument(new StyleContext());
                jTextPaneTeksti.setDocument(uusiDokumentti);

                //luetaan dokumentin ensimmäinen rivi
                BufferedReader lukija = new BufferedReader(new FileReader(tiedosto));
                String ekaRivi = lukija.readLine();
                lukija.close();

                //Jos eka rivi alkaa '{\rtf' -tunnisteella, luetaan rtf:nä, muuten tavallisena tekstinä
                //onRTF -muuttuja pitää lukua, onko avattu dokumentti rtf, vai ei. Tätä käytetään pikatallennuksen yhteydessä.
                if (ekaRivi.startsWith("{\\rtf")) {
                    FileInputStream RTFlukija = new FileInputStream(tiedosto);
                    jTextPaneTeksti.getEditorKit().read(RTFlukija, uusiDokumentti, 0);
                    RTFlukija.close();
                    onRTF = true;

                } else {
                    lukija = new BufferedReader(new FileReader(tiedosto));
                    jTextPaneTeksti.getEditorKitForContentType("text/plain").read(lukija, jTextPaneTeksti.getDocument(), 0);
                    lukija.close();
                    onRTF = false;
                }

                jMenuItemTallenna.setEnabled(true);
                kumousKuuntelija(); //lisätään dokumenttiin kumoustoiminnallisuus
                this.setTitle("Sanaseppo - " + tiedosto.getName());
                tallennettu = true; //tällä pidetään lukua siitä, onko tiedostossa tapahtunut tallentamattomia muutoksia

            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Lukemisessa tapahtui virhe", "Virhe", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItemAvaaActionPerformed

    private void jMenuItemTallennaNimellaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTallennaNimellaActionPerformed
        tallennaNimella();
    }//GEN-LAST:event_jMenuItemTallennaNimellaActionPerformed

    /**
     * Korjaa käyttäjän valitseman tiedostonimen pääte vastaamaan valittua
     * tiedostotyyppiä
     */
    private void korjaaTiedostoPaate() {
        String[] osat = tiedosto.getName().split("\\.");
        String tiedostoTyyppi = tiedostoValinta.getFileFilter().getDescription();

        //jos tiedostotyypiksi on valittu .rtf ja tiedostopäätteeksi on kirjoitettu jokin muu kuin .rtf
        //sama .txt -tiedostojen kanssa
        if (tiedostoTyyppi.equals("Rikas teksti (*.rtf)") && (osat.length < 2 || !osat[osat.length - 1].equalsIgnoreCase("rtf"))) {
            tiedosto = new File(tiedosto.getPath() + ".rtf");
        } else if (tiedostoTyyppi.equals("Tavallinen teksti (*.txt)") && (osat.length < 2 || !osat[osat.length - 1].equalsIgnoreCase("txt"))) {
            tiedosto = new File(tiedosto.getPath() + ".txt");
        }
    }

    /**
     * Kysyy käyttäjältä tiedostonimen/sijainnin ja tallentaa dokumentin sinne
     */
    private void tallennaNimella() {
        int tiedostoTila = tiedostoValinta.showSaveDialog(null);

        if (tiedostoTila == JFileChooser.APPROVE_OPTION) {
            tiedosto = tiedostoValinta.getSelectedFile();
            korjaaTiedostoPaate(); //varmistetaan, että tiedostopääte vastaa valittua tiedostotyyppiä

            //jos tiedostotyypiksi on valittu .rtf, talletetaan muuttujaan, käytetään tiedoston tallennuksessa
            if (tiedostoValinta.getFileFilter().getDescription().equals("Rikas teksti (*.rtf)")) {
                onRTF = true;
            } else {
                onRTF = false;
            }

            if (tallennaTiedosto()) {
                jMenuItemTallenna.setEnabled(true); //enabloidaan tallenna-painike tiedosto-valikosta
                this.setTitle("Sanaseppo - " + tiedosto.getName());
            }
        }
    }

    /**
     * Tallentaa dokumentin tiedosto-muuttujan osoittamaan paikkaan
     *
     * @return Onnistuiko tiedoston tallentaminen
     */
    private boolean tallennaTiedosto() {
        try {
            // rtf-tiedoston tallentaminen vaatii luokan joka tallentaa tiedon bittivirtana. Perusteksti tallentuu käyttäen merkkijonoja käsittelevää luokkaa
            if (onRTF) {
                FileOutputStream RTFkirjoittaja = new FileOutputStream(tiedosto);
                jTextPaneTeksti.getEditorKit().write(RTFkirjoittaja, jTextPaneTeksti.getStyledDocument(), 0, jTextPaneTeksti.getStyledDocument().getLength());
                RTFkirjoittaja.close();
            } else {
                FileWriter kirjoittaja = new FileWriter(tiedosto);
                kirjoittaja.write(jTextPaneTeksti.getStyledDocument().getText(0, jTextPaneTeksti.getStyledDocument().getLength()));
                kirjoittaja.close();
            }
            tallennettu = true; //tiedosto on nyt tallennettu. Ohjelma ei kysy varmistusta jos se suljetaan
            return true;

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Tallennus epäonnistui (" + e.getMessage() + ")", "Virhe", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    /**
     * Palauttaa, onko tekstistä valittu jokin alue
     *
     * @return Onko valintaa olemassa
     */
    private boolean valintaOlemassa() {
        return jTextPaneTeksti.getSelectionEnd() > jTextPaneTeksti.getSelectionStart();
    }

    /**
     * Lisää tietyn muotoilun valittuun tekstiin, tai syöttöattribuutteihin, jos
     * valintaa ei tehty
     *
     * @param muotoilu Muotoilu, joka lisätään
     */
    private void lisaaMuotoilu(Object muotoilu) {
        SimpleAttributeSet as = new SimpleAttributeSet();
        as.addAttribute(muotoilu, true); // true lisää muotoilun
        jTextPaneTeksti.setCharacterAttributes(as, false); //lisää attribuutit valittuun alueeseen, tai syöttöattribuutteihin, jos valintaa ei ole.

        jTextPaneTeksti.requestFocusInWindow();
    }

    /**
     * Poistaa annetun muotoilun valitusta tekstistä, tai syöttöattribuuteista,
     * jos valintaa ei tehty
     *
     * @param muotoilu Muotoilu joka poistetaan
     */
    private void poistamuotoilu(Object muotoilu) {
        SimpleAttributeSet as = new SimpleAttributeSet();
        as.addAttribute(muotoilu, false); //false poistaa muotoilun
        jTextPaneTeksti.setCharacterAttributes(as, false); //lisää attribuutit valittuun alueeseen, tai syöttöattribuutteihin, jos valintaa ei ole.

        jTextPaneTeksti.requestFocusInWindow();
    }

    /**
     * Avaa tulostusdialogin ja tulostaa dokumentin
     */
    private void tulosta() {
        try {
            jTextPaneTeksti.print();
        } catch (PrinterException e) {
            JOptionPane.showMessageDialog(rootPane, e.getMessage(), "Virhe", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Lisää dokumenttiin kumous/palautustoiminnallisuuden
     */
    private void kumousKuuntelija() {
        kumoa = new UndoManager();

        jTextPaneTeksti.getStyledDocument().addUndoableEditListener(new UndoableEditListener() {
            @Override
            public void undoableEditHappened(UndoableEditEvent e) {
                kumoa.addEdit(e.getEdit());
                kumoaPalautaNapit(); //kumoa ja palauta -nappien enablointi/disablointi
                tallennettu = false; //nyt on tapahtunut tallentamaton muutos. ohjelma pyytää varmistusta, jos lopettaa
            }
        });
    }

    /**
     * Tarkistaa, onko kumottavia/palautettavia tapahtumia, ja enabloi/disabloi
     * vastaavat napit käyttöliittymässä
     */
    private void kumoaPalautaNapit() {
        if (kumoa.canUndo()) {
            jButtonKumoa.setEnabled(true);
        } else {
            jButtonKumoa.setEnabled(false);
        }

        if (kumoa.canRedo()) {
            jButtonUudelleen.setEnabled(true);
        } else {
            jButtonUudelleen.setEnabled(false);
        }
    }

    /**
     * Kumoaa yhden tapahtuman
     */
    private void kumoa() {
        if (kumoa.canUndo()) {
            try {
                kumoa.undo();
            } catch (Exception e) {
            }
        }
        kumoaPalautaNapit(); //kumoa ja palauta -nappien enablointi/disablointi
    }

    /**
     * Poistaa yhden kumouksen
     */
    private void uudelleen() {
        if (kumoa.canRedo()) {
            try {
                kumoa.redo();
            } catch (Exception e) {
            }
        }
        kumoaPalautaNapit(); //kumoa ja palauta -nappien enablointi/disablointi
    }

    /**
     * Vaihtaa fontin värin annettuun
     *
     * @param uusiVari Väri, johon fontti vaihdetaan
     */
    private void fonttiVari(Color uusiVari) {
        SimpleAttributeSet as = new SimpleAttributeSet();
        StyleConstants.setForeground(as, uusiVari);
        jTextPaneTeksti.setCharacterAttributes(as, false); //vaihtaa uuden värin joko valittuun tekstiin, tai syöttöattribuutteihin
    }

    /**
     * Palauttaa yhden resurssikansiossa olevan kuvakkeen ikonimuodossa
     *
     * @param nimi kuvatiedoston nimi
     * @return
     */
    private ImageIcon haeIkoni(String nimi) {
        try {
            ImageIcon ikoni;
            ikoni = new ImageIcon(ImageIO.read(this.getClass().getResource(nimi)));
            return ikoni;
        } catch (Exception e) {
            return new ImageIcon();
        }
    }

    /**
     * Tämä koodi ajetaan, jos ohjelma yritetään sulkea. Jos tekstiin on tehty
     * muutoksia avaamisen tai viimeisen tallennuskerran jälkeen, pyydetään
     * vahvistus ennen kuin ohjelma suljetaan.
     */
    private void sulje() {
        if (tallennettu) {
            System.exit(0);
        } else if (JOptionPane.showConfirmDialog(rootPane, "Tiedostossa on tallentamattomia muutoksia. Haluatko varmasti lopettaa?", "Suljetaan", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.OK_OPTION) {
            System.exit(0);
        }
    }

    // Pääikkunan iso tallennusnappi. Tallentaa nimellä, jos on uusi tiedosto, pikatallennus jos on tallennettu nimellä tai avattu olemassaoleva tiedosto.
    private void jButtonTallennaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTallennaActionPerformed
        if (tiedosto == null) {
            tallennaNimella();
        } else {
            tallennaTiedosto();
        }
        jTextPaneTeksti.requestFocusInWindow();
    }//GEN-LAST:event_jButtonTallennaActionPerformed

    //Tiedosto-valikon pikatallennusnappi
    private void jMenuItemTallennaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTallennaActionPerformed
        tallennaTiedosto();
    }//GEN-LAST:event_jMenuItemTallennaActionPerformed

    //Tiedosto-valikon lopettamisnappi
    private void jMenuItemLopetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLopetaActionPerformed
        sulje();
    }//GEN-LAST:event_jMenuItemLopetaActionPerformed

    //leikkaa valinnan systeemin leikepöydälle
    private void jButtonLeikkaaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLeikkaaActionPerformed
        jTextPaneTeksti.cut();
        jTextPaneTeksti.requestFocusInWindow();
    }//GEN-LAST:event_jButtonLeikkaaActionPerformed

    //kopioi valinnan systeemin leikepöydälle
    private void jButtonKopioiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonKopioiActionPerformed
        jTextPaneTeksti.copy();
        jTextPaneTeksti.requestFocusInWindow();
    }//GEN-LAST:event_jButtonKopioiActionPerformed

    //liittää tekstin systeemin leikepöydältä
    private void jButtonLiitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLiitaActionPerformed
        jTextPaneTeksti.paste();
        jTextPaneTeksti.requestFocusInWindow();
    }//GEN-LAST:event_jButtonLiitaActionPerformed

    //lihavointinapin toiminta
    private void jButtonLihavoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLihavoiActionPerformed
        //muotoilu lisätään tai poistetaan sen perusteella, onko napin reunus enabloitu
        if (jButtonLihavoi.isBorderPainted()) {
            poistamuotoilu(StyleConstants.Bold);
            jButtonLihavoi.setBorderPainted(false);

        } else {
            lisaaMuotoilu(StyleConstants.Bold);
            jButtonLihavoi.setBorderPainted(true);
        }
    }//GEN-LAST:event_jButtonLihavoiActionPerformed

    //kursivointinapin toiminta
    private void jButtonKursivoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonKursivoiActionPerformed
        //muotoilu lisätään tai poistetaan sen perusteella, onko napin reunus enabloitu
        if (jButtonKursivoi.isBorderPainted()) {
            poistamuotoilu(StyleConstants.Italic);
            jButtonKursivoi.setBorderPainted(false);

        } else {
            lisaaMuotoilu(StyleConstants.Italic);
            jButtonKursivoi.setBorderPainted(true);
        }
    }//GEN-LAST:event_jButtonKursivoiActionPerformed

    // Tämä metodi ajetaan joka kerta kun kursorin paikka siirtyy tekstissä, tai jokin alue tekstistä valitaan.
    private void jTextPaneTekstiCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextPaneTekstiCaretUpdate
        //haetaan dokumentin teksti
        String teksti = "";
        try {
            teksti = jTextPaneTeksti.getStyledDocument().getText(0, jTextPaneTeksti.getStyledDocument().getLength());
        } catch (BadLocationException e) {
        }

        //päivitetään ikkunan alapalkille tilastotiedot
        jLabelSanoja.setText("Sanoja: " + TekstiTilasto.laskeSanat(teksti));
        jLabelRiveja.setText("Rivejä: " + TekstiTilasto.laskeRivit(teksti));
        jLabelMerkkiIndeksi.setText("Indeksi: " + TekstiTilasto.laskeIndeksi(jTextPaneTeksti.getCaretPosition(), teksti));
        jLabelRiviIndeksi.setText("Rivi: " + TekstiTilasto.nykyRivi(jTextPaneTeksti.getCaretPosition(), teksti));

        int alku = jTextPaneTeksti.getSelectionStart();
        int loppu = jTextPaneTeksti.getSelectionEnd();

        //jos tekstistä on valittu alue, alue käydään läpi merkki kerrallaan ja lasketaan jokainen lihavointi/kursivointi/alleviivaus
        if (valintaOlemassa()) {

            int merkit = loppu - alku;
            int merkitLihavoitu = 0;
            int merkitKursiivi = 0;
            int merkitAlleviiva = 0;

            for (int i = alku; i < loppu; i++) {
                if (StyleConstants.isBold(jTextPaneTeksti.getStyledDocument().getCharacterElement(i).getAttributes())) {
                    merkitLihavoitu++;
                }
                if (StyleConstants.isItalic(jTextPaneTeksti.getStyledDocument().getCharacterElement(i).getAttributes())) {
                    merkitKursiivi++;
                }
                if (StyleConstants.isUnderline(jTextPaneTeksti.getStyledDocument().getCharacterElement(i).getAttributes())) {
                    merkitAlleviiva++;
                }
            }

            //Jos ainakin puolet valitun alueen merkeistä vastaa jokaista muotoilua, kyseisen muotoilun napin reunus enabloidaan.
            //Tällöin, jos nappia painetaan uudestaan, muotoilu poistetaan koko alueelta.
            //Jos alle puolet merkeistä on muotoiltu tietyllä tyylillä, muotoilunappi lisää muotoilun koko alueelle.
            if (merkitLihavoitu >= merkit / 2.0) {
                jButtonLihavoi.setBorderPainted(true);
            } else {
                jButtonLihavoi.setBorderPainted(false);
            }
            if (merkitKursiivi >= merkit / 2.0) {
                jButtonKursivoi.setBorderPainted(true);
            } else {
                jButtonKursivoi.setBorderPainted(false);
            }
            if (merkitAlleviiva >= merkit / 2.0) {
                jButtonAlleviivaa.setBorderPainted(true);
            } else {
                jButtonAlleviivaa.setBorderPainted(false);
            }
            //Jos valintaa ei ole tehty, ja kursori ei ole ensimmäisellä indeksillä, katsotaan muotoilutiedot edellisestä merkistä ja asetetaan sen mukaan muotoilunappien reunukset
        } else if (alku > 0) {
            alku--;

            if (StyleConstants.isBold(jTextPaneTeksti.getStyledDocument().getCharacterElement(alku).getAttributes())) {
                jButtonLihavoi.setBorderPainted(true);
            } else {
                jButtonLihavoi.setBorderPainted(false);
            }
            if (StyleConstants.isItalic(jTextPaneTeksti.getStyledDocument().getCharacterElement(alku).getAttributes())) {
                jButtonKursivoi.setBorderPainted(true);
            } else {
                jButtonKursivoi.setBorderPainted(false);
            }
            if (StyleConstants.isUnderline(jTextPaneTeksti.getStyledDocument().getCharacterElement(alku).getAttributes())) {
                jButtonAlleviivaa.setBorderPainted(true);
            } else {
                jButtonAlleviivaa.setBorderPainted(false);
            }
            //asetetaan edellisen merkin arvo fontti ja fonttikokovalitsimiin
            jComboBoxFontit.setSelectedItem(jTextPaneTeksti.getStyledDocument().getCharacterElement(alku).getAttributes().getAttribute(StyleConstants.FontFamily));
            jComboBoxFKoko.setSelectedItem(String.valueOf(jTextPaneTeksti.getStyledDocument().getCharacterElement(alku).getAttributes().getAttribute(StyleConstants.FontSize)));

            //Jos valintaa ei ole, ja kursori on tekstin alussa, asetetaan oletusarvot
        } else {

            jComboBoxFontit.setSelectedItem("Arial");
            jComboBoxFKoko.setSelectedItem("12");

            SimpleAttributeSet as = new SimpleAttributeSet();
            jTextPaneTeksti.setCharacterAttributes(as, true);
            jButtonLihavoi.setBorderPainted(false);
            jButtonKursivoi.setBorderPainted(false);
            jButtonAlleviivaa.setBorderPainted(false);
        }
    }//GEN-LAST:event_jTextPaneTekstiCaretUpdate

    //Tulostusnappi
    private void jButtonTulostaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTulostaActionPerformed
        tulosta();
    }//GEN-LAST:event_jButtonTulostaActionPerformed

    //alleviivaus-napin toiminta
    private void jButtonAlleviivaaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAlleviivaaActionPerformed
        //muotoilu lisätään tai poistetaan sen perusteella, onko napin reunus enabloitu
        if (jButtonAlleviivaa.isBorderPainted()) {
            poistamuotoilu(StyleConstants.Underline);
            jButtonAlleviivaa.setBorderPainted(false);

        } else {
            lisaaMuotoilu(StyleConstants.Underline);
            jButtonAlleviivaa.setBorderPainted(true);
        }
    }//GEN-LAST:event_jButtonAlleviivaaActionPerformed

    //Fonttivärin valinta
    private void jButtonFonttiVariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFonttiVariActionPerformed
        Color uusiVari = variValinta.showDialog(rootPane, "Valitse fontin väri", vari);
        if (uusiVari != null) {
            vari = uusiVari;
            fonttiVari(vari);
            jButtonPikaFonttiVari.setBackground(vari); //Vaihdetaan pikavärinapin väri vastaamaan viimeksi valittua
        }
        jTextPaneTeksti.requestFocus();
    }//GEN-LAST:event_jButtonFonttiVariActionPerformed

    //Fonttikoon valintaboksi
    private void jComboBoxFKokoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFKokoActionPerformed
        String koko = (String) jComboBoxFKoko.getSelectedItem();

        //Mitään ei tehdä jos fonttikokoon on syötetty merkkejä jotka eivät ole numeroita.
        if (!koko.matches("[0-9]+")) {
            return;
        }
        int kokoLuku = Integer.valueOf(koko);
        
        //Mitään ei tehdä jos fonttikoko on määritelty liian suureksi tai pieneksi.
        if (kokoLuku < MIN_FONTTIKOKO || kokoLuku >= MAKS_FONTTIKOKO) {
            return;
        }

        SimpleAttributeSet as = new SimpleAttributeSet();
        StyleConstants.setFontSize(as, kokoLuku);
        jTextPaneTeksti.setCharacterAttributes(as, false); //Asettaa fonttikoon valittuun tekstiin, tai syöttöattribuutteihin, jos valintaa ei ole.

        jTextPaneTeksti.requestFocusInWindow();
    }//GEN-LAST:event_jComboBoxFKokoActionPerformed

    //Fonttivalinta
    private void jComboBoxFontitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFontitActionPerformed
        SimpleAttributeSet as = new SimpleAttributeSet();
        StyleConstants.setFontFamily(as, (String) jComboBoxFontit.getSelectedItem());
        jTextPaneTeksti.setCharacterAttributes(as, false); //Asettaa fontin valittuun tekstiin, tai syöttöattribuutteihin, jos valintaa ei ole
        jTextPaneTeksti.requestFocusInWindow();
    }//GEN-LAST:event_jComboBoxFontitActionPerformed

    //Tiedosto-valikon tulosta-nappi
    private void jMenuItemTulostaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTulostaActionPerformed
        tulosta();
    }//GEN-LAST:event_jMenuItemTulostaActionPerformed

    //Kumoa-nappi
    private void jButtonKumoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonKumoaActionPerformed
        kumoa();
    }//GEN-LAST:event_jButtonKumoaActionPerformed

    //Uudelleen-nappi
    private void jButtonUudelleenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUudelleenActionPerformed
        uudelleen();
    }//GEN-LAST:event_jButtonUudelleenActionPerformed

    //Muokkaa-valikon kumoa-nappi
    private void jMenuItemKumoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemKumoaActionPerformed
        kumoa();
    }//GEN-LAST:event_jMenuItemKumoaActionPerformed

    //Muokkaa-valikon uudelleen-nappi
    private void jMenuItemUudelleenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemUudelleenActionPerformed
        uudelleen();
    }//GEN-LAST:event_jMenuItemUudelleenActionPerformed

    //Pikafonttivärinappi
    private void jButtonPikaFonttiVariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPikaFonttiVariActionPerformed
        fonttiVari(jButtonPikaFonttiVari.getBackground()); // Asetetaan tekstin väriksi pikavalintanapin nykyinen taustaväri
        jTextPaneTeksti.requestFocus();
    }//GEN-LAST:event_jButtonPikaFonttiVariActionPerformed

    //Muokkaa-valikon valitse kaikki -nappi
    private void jMenuItemValitseKaikkiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemValitseKaikkiActionPerformed
        jTextPaneTeksti.setSelectionStart(0);
        jTextPaneTeksti.setSelectionEnd(jTextPaneTeksti.getDocument().getLength());
    }//GEN-LAST:event_jMenuItemValitseKaikkiActionPerformed

    //Tämä ajetaan kun ikkuna suljetaan
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        sulje();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            //Suositaan "Metal"-teemaa, jos löytyy
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SanaSeppo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SanaSeppo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SanaSeppo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SanaSeppo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SanaSeppo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAlleviivaa;
    private javax.swing.JButton jButtonFonttiVari;
    private javax.swing.JButton jButtonKopioi;
    private javax.swing.JButton jButtonKumoa;
    private javax.swing.JButton jButtonKursivoi;
    private javax.swing.JButton jButtonLeikkaa;
    private javax.swing.JButton jButtonLihavoi;
    private javax.swing.JButton jButtonLiita;
    private javax.swing.JButton jButtonPikaFonttiVari;
    private javax.swing.JButton jButtonTallenna;
    private javax.swing.JButton jButtonTulosta;
    private javax.swing.JButton jButtonUudelleen;
    private javax.swing.JComboBox<String> jComboBoxFKoko;
    private javax.swing.JComboBox<String> jComboBoxFontit;
    private javax.swing.JLabel jLabelMerkkiIndeksi;
    private javax.swing.JLabel jLabelRiveja;
    private javax.swing.JLabel jLabelRiviIndeksi;
    private javax.swing.JLabel jLabelSanoja;
    private javax.swing.JMenuBar jMenuBarValikko;
    private javax.swing.JMenuItem jMenuItemAvaa;
    private javax.swing.JMenuItem jMenuItemKopioi;
    private javax.swing.JMenuItem jMenuItemKumoa;
    private javax.swing.JMenuItem jMenuItemLeikkaa;
    private javax.swing.JMenuItem jMenuItemLiita;
    private javax.swing.JMenuItem jMenuItemLopeta;
    private javax.swing.JMenuItem jMenuItemTallenna;
    private javax.swing.JMenuItem jMenuItemTallennaNimella;
    private javax.swing.JMenuItem jMenuItemTulosta;
    private javax.swing.JMenuItem jMenuItemUudelleen;
    private javax.swing.JMenuItem jMenuItemUusi;
    private javax.swing.JMenuItem jMenuItemValitseKaikki;
    private javax.swing.JMenu jMenuMuokkaa;
    private javax.swing.JMenu jMenuTiedosto;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JTextPane jTextPaneTeksti;
    // End of variables declaration//GEN-END:variables

    private JFileChooser tiedostoValinta; //Tiedoston valitsemisdialogi
    private File tiedosto; //Viimeksi avattu/tallennettu tiedosto
    private JColorChooser variValinta; //Tekstivärin valitsemisdialogi
    private Color vari; //Viimeksi valittu tekstiväri
    private UndoManager kumoa; //Luokka, joka pitää lukua kumottavista muutoksista
    private boolean tallennettu; //Tosi, jos ei ole tehty muutoksia viime tallentamisen/avaamisen jälkeen
    private boolean onRTF; //Tallennetaanko tiedosto rtf-muodossa

    private static final int MAKS_FONTTIKOKO = 100;
    private static final int MIN_FONTTIKOKO = 6;

}
